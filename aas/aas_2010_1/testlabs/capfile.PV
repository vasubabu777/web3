require 'testlabs/installer'
set :use_sudo, false

if ENV['BUILD_NUMBER'].to_s.empty?
  build_number = "latest"
else 
  build_number =  ENV['BUILD_NUMBER']
end

set :release, "aas_2010_1"
set :build, "/u/build/build3/aas/#{release}/lnx8-build/#{build_number}"
set :staging, "/remoteInstall/#{release}/#{build_number}"
set :app_home, "/app/vrsn"
set :be_host1, "aas2-be"
set :be_host2, "aas2-be"
set :qm_host, "mmr1-qm-be"

set :qm_packages, [
  { :package_tag => "aas_sql", :package_name => "#{release}_aas_sql.tar", :install_path => "/ecas/aas/#{qm_instance}/latest", :customizable => "no" }, 
]

set :be_packages, [
#  { :package_tag => "jbossconf", :package_name => "#{release}_jbossconf.tar", :install_path => "#{app_home}/aas", :customizable => "no" }, 
#  { :package_tag => "domain", :package_name => "#{release}_domain.tar", :install_path => "#{app_home}/aas", :customizable => "yes" }, 
  { :package_tag => "adms", :package_name => "#{release}_adms.tar", :install_path => "#{app_home}/aas", :customizable => "no" }, 
  { :package_tag => "apor", :package_name => "#{release}_apor.tar", :install_path => "#{app_home}/aas", :customizable => "no" }, 
#  { :package_tag => "avs", :package_name => "#{release}_avs.tar", :install_path => "#{app_home}/aas", :customizable => "yes" }, 
#  { :package_tag => "cat", :package_name => "#{release}_cat.tar", :install_path => "#{app_home}/aas", :customizable => "yes" }, 
]

task :aas_upload do
  begin
     qm_upload
     be_upload
  end
end

task :be_upload, :hosts => "pin@#{be_host1}, pin@#{be_host2}" do 
# Create staging directories and remove old packages if existed
  run "rm -rf /remoteInstall/#{release}"
  run "mkdir -p #{staging}/productionPackaging"

# Copy packages
  be_packages.each { |x|
     upload  "#{build}/productionPackaging/#{release}/" + x[:package_name], "#{staging}/productionPackaging/", :via => :scp
  }

# Copy customization file
  upload "#{build}/buildOp/aas/#{release}/$CAPISTRANO:HOST$/*", "#{staging}", :via => :scp, :recursive => true

end

task :qm_upload, :hosts => "pin@#{qm_host}" do 
# Create staging directories and remove old packages if existed
  run "rm -rf /remoteInstall/#{release}"
  run "mkdir -p #{staging}/productionPackaging"

# Copy packages
  qm_packages.each { |x|
     upload  "#{build}/productionPackaging/#{release}/" + x[:package_name], "#{staging}/productionPackaging/", :via => :scp
  }
end

