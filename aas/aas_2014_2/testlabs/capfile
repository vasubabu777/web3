# vim: filetype=ruby
require 'fileutils'
require 'net/smtp'
# For QA log
require '/u/build/build1/testlabs/lib/installer.rb'

###############################
## Release Notes:
# https://fusion.qa.shared-bo.mtv1.vrsn.com/display/SSL/AAS-2014-2+Deployment+Instructions
###############################

# Current release
set :release, "aas_2014_2"
#Previous release
set :prev_release, "aas_2014_1"

# Base installation directory
set :be_install_dir, "/app/symc"
set :monitor_install_dir, "/app/monitors/aas/#{testbed}"

# Location of release tar packages on cap server
#set :pkg_path, "/code/aas/#{release}"
set :pkg_path, "/u/build/build3/aas/#{release}/lnx8-build/#{build_number}/productionPackaging/#{release}"

# Logs Directory
set :logs_dir, "/app/logs/aas"

# For QA logs
set :logpath , "/u/build/build1/buildOp/aas/#{release}/testlabs/logDir"
load '/u/build/build1/testlabs/lib/commontask.yonit.cap' #SHARED TASKS

# Temporary staging directory for release
set :stage_dir, "#{release}.staging"

# Location of customization files for release
set :customizer_repo, "/app/capistrano/customizer/aas/#{release}"

# Location of third party packages on cap sever 
set :thirdparty_pkg_path, "/code/thirdparty"
set :tomcat_version, "7.0.52"
set :java_version, "jdk1.7.0_51"
set :java_file, "7u51"

# Location of target host directory to transfer packages to
set :be_stagepkg_dir, "#{be_install_dir}/#{stage_dir}/packages"
set :monitor_stagepkg_dir, "#{monitor_install_dir}/#{stage_dir}/packages"

# Set capistrano shared functions
load '/app/capistrano/lib/common_1_1.cap'

# QA email address
@mailarray = ['DL-VSN-vss-testlabs@symantec.com','DL-VSN-SSLQAEDCNotification@symantec.com']

role :monitor, "nagios@dm1-bo","nagios@dm1-fo", "nagios@dm2-bo", "nagios@dm2-fo"

#SWITCH SILO
case testbed
   when "aas1"
     role :app, "pin@aas1be-m1-ap"
     role :web, "mozilla@aas1fe-m1-wb"
     emailsubj = "AAS1"
   when "aas2"
     role :app, "pin@aas2be-m1-ap"
     role :web, "mozilla@aas2fe-m2-wb"
     emailsubj = "AAS2"
   when "aas3"
     role :app, "pin@aas3be-m1-ap"
     role :web, "mozilla@aas3fe-m1-wb"
     emailsubj = "AAS3"
   when "aas4"
     role :app, "pin@aas4be-m2-ap"
     role :web, "mozilla@aas4fe-m2-wb"
     emailsubj = "AAS4"
   else
     puts "Invalid testbed #{testbed}"
     exit 1
end

desc "Install of #{release}"
task :install do
  begin
     install_be
     install_monitor
  rescue Exception => error
     install_status("1","WiKi: https://fusion.qa.shared-bo.mtv1.vrsn.com/display/vsstestlabs/VSS+TestLabs+-+SSL+-+#{testbed.upcase}\n",emailsubj)
#     mailer(@mailarray, "Install Failed #{emailsubj} : #{release}","#{emailsubj} was NOT installed properly. Please check the cap install log for details")
     exit 1
  end
     install_status("0","WiKi: https://fusion.qa.shared-bo.mtv1.vrsn.com/display/vsstestlabs/VSS+TestLabs+-+SSL+-+#{testbed.upcase}\n",emailsubj)
#     mailer(@mailarray, "Install Completed #{emailsubj} : #{release}","#{emailsubj} has been installed with #{release}")
end

desc "Rollback to a rollback_release specified"
task :rollback do
  begin
     if !exists?(:rollback_release)
        print "\nERROR: -Srollback_release not specified!\n\n"
        set :rollback_release, "Not Specified"
        exit 1
     else
        rollback_app
        rollback_monitor
     end

  rescue Exception => error
     mailer(@mailarray, "Rollback Failed #{emailsubj} : #{rollback_release}","")
     exit 1
  end
     mailer(@mailarray, "Rollback Completed: #{emailsubj} : #{rollback_release}","")
end

desc "Install of #{release} on back end"
task :install_be, :roles => :app do
  begin
     install_thirdparty
     stage
     swap_install
  end
end

desc "Rollback BE to a rollback_release specified"
task :rollback_app, :roles => :app do
  begin
     set :release, "#{rollback_release}"

   # Check if the requested release directory is available
     if !remote_file_exists?("#{be_install_dir}/#{release}") then
        print "\nERROR: #{release} does not exist!\n\n"
        exit 1
     else
        print "\nINFO: Rolling BE back to #{release}\n\n"
        swap_install
     end

  end
end

desc "Install third party packages if missing"
task :install_thirdparty, :roles => :app do
    if !remote_file_exists?("#{be_install_dir}") then
       print "\nERROR: #{be_install_dir} does not exist!\n\n"
       exit 1
    else
      install_jdk
      install_tomcat
      check_logs_dir
    end

end

desc "Check the logs directory exists"
task :check_logs_dir, :roles => :app  do
    if remote_file_exists?("#{logs_dir}") then
       print "\nINFO: Logs directory #{logs_dir} already exists\n\n"
    else
        run "mkdir -p #{logs_dir}"
        print "\nINFO: Created logs directory #{logs_dir}\n\n"
    end
end

desc "Install JDK on BE machine"
task :install_jdk, :roles => :app do
    if !remote_file_exists?("#{be_install_dir}/java/packages") then
       run "mkdir -p #{be_install_dir}/java/packages"
    end
    if remote_file_exists?("#{be_install_dir}/java/#{java_version}/bin/java") then
       print "\nINFO: #{java_version} has already been installed under #{be_install_dir}/java\n\n"
    else
       upload "#{thirdparty_pkg_path}/java/jdk-#{java_file}-linux-x64.tar.gz", "#{be_install_dir}/java/packages", :via => :scp
       run "cd #{be_install_dir}/java; tar zxvf #{be_install_dir}/java/packages/jdk-#{java_file}-linux-x64.tar.gz"
       print "\nINFO: #{java_version} has been installed under #{be_install_dir}/java\n\n"
    end
end

desc "Install Tomcat on BE machine"
task :install_tomcat, :roles => :app do
    if !remote_file_exists?("#{be_install_dir}/tomcat/packages") then
       run "mkdir -p #{be_install_dir}/tomcat/packages"
    end
    if remote_file_exists?("#{be_install_dir}/tomcat/apache-tomcat-#{tomcat_version}") then
       print "\nINFO: Tomcat #{tomcat_version} has already been installed\n\n"
    else
       upload "#{thirdparty_pkg_path}/tomcat/apache-tomcat-#{tomcat_version}.tar.gz", "#{be_install_dir}/tomcat/packages", :via => :scp
       run "chmod 700 #{be_install_dir}/tomcat/packages/apache-tomcat-#{tomcat_version}.tar.gz"
       run "cd #{be_install_dir}/tomcat; tar zxvf #{be_install_dir}/tomcat/packages/apache-tomcat-#{tomcat_version}.tar.gz"
       run "cd #{be_install_dir}/tomcat/apache-tomcat-#{tomcat_version}; rm -rf webapps work temp logs"
       print "\nINFO: Tomcat #{tomcat_version} has been installed\n\n"
    end
end

desc "Transfer BE packages, stage code (install and customize)"
task :stage, :roles => :app do

  # Remove the previous staging directory if exists
    if remote_file_exists?("#{be_install_dir}/#{stage_dir}") then
       print "\nINFO: Removing existing #{be_install_dir}/#{stage_dir}\n "
       run "cd #{be_install_dir} && rm -rf #{stage_dir} "
    end
  
  # Create the staging directory
    print "\nINFO: Created #{be_install_dir}/#{stage_dir}\n\n"
    run "mkdir -p #{be_stagepkg_dir}/customizer"

  # Transfer customization files 
    print "\nINFO: Transfering Customization files\n"
    upload "#{customizer_repo}/$CAPISTRANO:HOST$/CustomizeInit.tomcat.pl", "#{be_stagepkg_dir}/customizer/CustomizeInit.tomcat.pl", :via => :scp
    upload "#{customizer_repo}/customize/Customize.pl", "#{be_stagepkg_dir}/customizer/Customize.pl", :via => :scp

  # Check CustomizeInit.tomcat.pl
    ret = capture("perl -c #{be_stagepkg_dir}/customizer/CustomizeInit.tomcat.pl; echo $?").strip
    if (ret != '0' )
       print "\nERROR: Customization file is corrupt \n\n"
       exit 1
    end

  # Transfer tar packages to be deployed 
    print "\nINFO: Transfering packages\n"
    upload "#{pkg_path}/#{release}_tomcat_app.tar","#{be_stagepkg_dir}/", :via => :scp
    upload "#{pkg_path}/#{release}_tomcat_app.md5","#{be_stagepkg_dir}/", :via => :scp
    upload "#{pkg_path}/#{release}_tomcat_config.tar","#{be_stagepkg_dir}/", :via => :scp

  # Un-tar packages and customize
    print "\nINFO: Deploying packages\n"
    run "cd #{be_install_dir}/#{stage_dir} && tar xvf #{be_stagepkg_dir}/#{release}_tomcat_app.tar"
    run "cd #{be_install_dir}/#{stage_dir} && tar xvf #{be_stagepkg_dir}/#{release}_tomcat_config.tar && perl #{be_stagepkg_dir}/customizer/Customize.pl -F #{be_stagepkg_dir}/customizer/CustomizeInit.tomcat.pl | tee #{be_stagepkg_dir}/customizer/customize_#{release}.log"

  # For QA
    run "cd #{be_install_dir}/#{stage_dir}; rm -f *.txt; touch #{build_number}.txt; true"

    print "\n INFO: BE Staging is completed. \n\n"

end

desc "Stop app, link to release, and start app"
task :swap_install, :roles => :app do
  # Print current directory content
   print "\nINFO: Contents of #{be_install_dir}\n"
   run "cd #{be_install_dir} && ls -l"

  # Stop application
   stop_app

  # Rename staging directory to new release name
   if remote_file_exists?("#{be_install_dir}/#{stage_dir}") then
    # Remove current directory if same release (unless in rollback)
     if remote_file_exists?("#{be_install_dir}/#{release}") then
       if !exists?(:rollback_release)
         print "\nINFO: Removing #{be_install_dir}/#{release} \n"
         run "cd #{be_install_dir} && rm -rf #{release}"
       end 
     end
     print "\nINFO: Renaming #{be_install_dir}/#{stage_dir} to #{be_install_dir}/#{release} \n"
     run "cd #{be_install_dir} && mv #{stage_dir} #{release}"
   end
 
  # Remove current link
   print "\nINFO: Removing symlinks #{be_install_dir}/aas\n"
   run "cd #{be_install_dir} && rm -f aas; true"
   
  # Create link to new release
   print "INFO: Creating symlinks #{be_install_dir}/aas\n"
   run "cd #{be_install_dir} && ln -s #{release}/aas"

  # Print current directory content to see the change in link
   print "\nINFO: Contents of #{be_install_dir} AFTER swap\n"
   run "cd #{be_install_dir} && ls -l"

   print "\n INFO: Swapping of aas link is completed. \n\n"

  # Start application
   start_app

end

desc "Stop AAS Tomcat"
task :stop_app, :roles => :app do
   print "\nINFO: Stopping Tomcat\n"
   run "#{be_install_dir}/aas/bin/tomcatctl stop; true;"
   sleep 5
   print "INFO: Verify Tomcat is down\n"
   tomcatprocess("Dcatalina.base=#{be_install_dir}/aas",120)
end

desc "Start AAS Tomcat"
task :start_app, :roles => :app do
   print "\nINFO: Starting Tomcat\n"
   run "#{be_install_dir}/aas/bin/tomcatctl start; true;"
   sleep 10
   print "INFO: Verify Tomcat is up\n"
   run "#{be_install_dir}/aas/bin/tomcatctl status"
   sleep 60
#   print "INFO: Tomcat Health Check\n"
#   healthcheck_curl("http://localhost:8080/aas/services","placeSSLOrder",180)
end

desc "Stop AAS Apache"
task :stop_web, :roles => :web do
  print "\nINFO: Stopping FE processes\n\n"
  run "sudo /etc/httpd/bin/stop_aas; true;"
  sleep 3
end

desc "Start AAS Apache"
task :start_web, :roles => :web do
  print "\nINFO: Starting FE processes\n\n"
  run "sudo /etc/httpd/bin/start_aas; true;"
end

desc "Install of #{release} on DM Nagios monitor"
task :install_monitor do
  begin
     stage_monitor
     swap_monitor_install
  end
end

desc "Rollback monitor to a rollback_release specified"
task :rollback_monitor, :roles => :monitor do
  begin
     set :release, "#{rollback_release}"

   # Checking if the rollback release directory exists
     if !remote_file_exists?("#{monitor_install_dir}/#{release}") then
         print "\nERROR #{release} does not exist on monitor!\n\n"
         exit 1
     else
         print "\nINFO: Rolling monitor back to #{release}\n\n"
         swap_monitor_install
     end

  end
end

desc "Transfer monitor package, stage code (install and customize)"
task :stage_monitor, :roles => :monitor do

  # Remove the previous staging directory if exists
    if remote_file_exists?("#{monitor_install_dir}/#{stage_dir}") then
       print "\nINFO: Removing existing #{monitor_install_dir}/#{stage_dir}\n "
       run "cd #{monitor_install_dir} && rm -rf #{stage_dir} "
    end

  # Create the staging directory
    run "mkdir -p #{monitor_stagepkg_dir}"
    print "\nINFO: Created #{monitor_stagepkg_dir}\n\n"

  # Transfer tar packages to be deployed
    print "\nINFO: Transfering packages\n"
    upload "#{pkg_path}/#{release}_tomcat_monitor.tar","#{monitor_stagepkg_dir}/", :via => :scp
    upload "#{pkg_path}/#{release}_tomcat_monitor.md5","#{monitor_stagepkg_dir}/", :via => :scp

  # Un-tar packages and customize
    print "\nINFO: Deploying Monitor packages\n"
    run "cd #{monitor_install_dir}/#{stage_dir} && tar xvf #{monitor_stagepkg_dir}/#{release}_tomcat_monitor.tar"

  # For QA creating version file
   run "cd #{monitor_install_dir}/#{stage_dir}; rm -f *.txt; touch #{build_number}.txt; true"

   print "\n INFO: Monitor Staging is completed. \n\n"

end

desc "Swap monitor libexec link to release"
task :swap_monitor_install, :roles => :monitor do
  # Print current directory content
   print "\nINFO: Contents of #{monitor_install_dir}\n"
   run "cd #{monitor_install_dir} && ls -l"

  # Remove current directory if same release (unless in rollback)
   if remote_file_exists?("#{monitor_install_dir}/#{release}") then
     if !exists?(:rollback_release)
       print "\nINFO: Removing #{monitor_install_dir}/#{release} \n"
       run "cd #{monitor_install_dir} && rm -rf #{release}"
     end
   end

  # Rename staging directory to new release name
   if remote_file_exists?("#{monitor_install_dir}/#{stage_dir}") then
     print "\nINFO: Renaming #{monitor_install_dir}/#{stage_dir} to #{monitor_install_dir}/#{release} \n"
     run "cd #{monitor_install_dir} && mv #{stage_dir} #{release}"
   end

  # Remove current link
   print "\nINFO: Removing symlinks #{monitor_install_dir}/bin\n"
   run "cd #{monitor_install_dir} && rm -f bin; true;"

  # Create link to new release
   print "INFO: Creating symlinks #{monitor_install_dir}/bin\n"
   run "cd #{monitor_install_dir} && ln -s #{release} bin"

  # Print current directory content to see the change in link
   print "\nINFO: Contents of #{monitor_install_dir} after relink:\n"
   run "cd #{monitor_install_dir} && ls -l"

   print "\n INFO: Swapping of monitor link is completed. \n\n"

end

